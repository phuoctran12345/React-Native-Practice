import React, { useEffect, useRef, useState } from 'react';
import { View, StyleSheet, TouchableOpacity, Text, ActivityIndicator, Alert, TouchableWithoutFeedback, Dimensions, Platform } from 'react-native';
import { Camera, CameraView } from 'expo-camera';
import { GLView } from 'expo-gl';
import { Renderer, loadAsync } from 'expo-three';
import * as THREE from 'three';
import { Asset } from 'expo-asset';
import { Buffer } from 'buffer';
// GLTFLoader will be imported dynamically to avoid bundling issues
import { GestureHandlerRootView, PanGestureHandler, State } from 'react-native-gesture-handler';
import { getGLBModelFromQRData, getGLBModelConfig } from '../utils/modelData';

interface PokemonARViewerProps {
  onClose: () => void;
}

const PokemonARViewer = ({ onClose }: PokemonARViewerProps) => {
  const [hasPermission, setHasPermission] = useState<boolean | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [loadingProgress, setLoadingProgress] = useState(0);
  const [modelInfo, setModelInfo] = useState<string>('');
  const [showDebugControls, setShowDebugControls] = useState(false);
  const [debugInfo, setDebugInfo] = useState<any>({});
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);
  const modelRef = useRef<THREE.Object3D | null>(null);
  const rotationRef = useRef({ x: 0, y: 0 });
  const sceneRef = useRef<THREE.Scene | null>(null);
  const cameraRef = useRef<THREE.Camera | null>(null);
  const rendererRef = useRef<THREE.WebGLRenderer | null>(null);
  const mixerRef = useRef<THREE.AnimationMixer | null>(null);
  const clockRef = useRef(new THREE.Clock());
  const [scannedData, setScannedData] = useState<string | null>(null);
  const [currentAnimation, setCurrentAnimation] = useState<string>('idle');
  const [animationFeedback, setAnimationFeedback] = useState<string>('');

  // ‚úÖ TOUCH HANDLER CHO XOAY 360 ƒê·ªò V√Ä ZOOM - S·ª¨A L·ªñI!
  const [touchStart, setTouchStart] = useState<{ x: number; y: number } | null>(null);
  const [initialDistance, setInitialDistance] = useState<number | null>(null);
  const [currentScale, setCurrentScale] = useState<number>(1);

  // ‚úÖ TC3.2: SWIPE GESTURE TRACKING
  const [swipeStart, setSwipeStart] = useState<{ x: number; y: number; time: number } | null>(null);
  const [isSwipeGesture, setIsSwipeGesture] = useState(false);

  // ‚úÖ TC6.2: SCREEN COMPATIBILITY
  const screenData = Dimensions.get('window');
  const isIOS = Platform.OS === 'ios';
  const hasNotch = screenData.height > 800; // Approximate notch detection

  // ‚úÖ CAMERA PERMISSION FUNCTION - MOVED UP TO AVOID HOISTING ISSUES
  const requestCameraPermission = async () => {
    try {
      console.log('üîç Requesting camera permission...');
      
      // ‚úÖ CHECK CURRENT PERMISSION STATUS FIRST
      const currentStatus = await Camera.getCameraPermissionsAsync();
      console.log('üì∑ Current permission status:', currentStatus.status);
      
      if (currentStatus.status === 'granted') {
        console.log('‚úÖ Camera permission already granted');
        setHasPermission(true);
        return;
      }
      
      // ‚úÖ REQUEST PERMISSION IF NOT GRANTED
      const { status } = await Camera.requestCameraPermissionsAsync();
      console.log('üì∑ Permission request result:', status);
      
      setHasPermission(status === 'granted');
      console.log('üì∑ Camera permission:', status === 'granted' ? 'GRANTED' : 'DENIED');
      
      if (status !== 'granted') {
        console.log('‚ùå Camera permission denied, showing error...');
      }
      
    } catch (error) {
      console.error('‚ùå Camera permission error:', error);
      setHasPermission(false);
    }
  };

  // ‚úÖ PERMISSION CHECKS - INSIDE COMPONENT
  console.log('üîç Camera permission state:', hasPermission);
  
  if (hasPermission === null) {
    console.log('‚è≥ Camera permission is null, showing loading...');
    return (
      <View style={styles.container}>
        <Text style={styles.text}>ƒêang y√™u c·∫ßu quy·ªÅn truy c·∫≠p camera...</Text>
        <TouchableOpacity style={styles.button} onPress={requestCameraPermission}>
          <Text style={styles.buttonText}>Th·ª≠ l·∫°i</Text>
        </TouchableOpacity>
      </View>
    );
  }

  if (hasPermission === false) {
    console.log('‚ùå Camera permission denied, showing error...');
    return (
      <View style={styles.container}>
        <Text style={styles.text}>‚ùå Kh√¥ng c√≥ quy·ªÅn truy c·∫≠p camera</Text>
        <TouchableOpacity style={styles.button} onPress={requestCameraPermission}>
          <Text style={styles.buttonText}>C·∫•p quy·ªÅn camera</Text>
        </TouchableOpacity>
        <TouchableOpacity style={[styles.button, { backgroundColor: '#666', marginTop: 10 }]} onPress={onClose}>
          <Text style={styles.buttonText}>Quay l·∫°i</Text>
        </TouchableOpacity>
      </View>
    );
  }

  // ‚úÖ HELPER FUNCTION ƒê·ªÇ T√çNH KHO·∫¢NG C√ÅCH GI·ªÆA 2 TOUCH
  const getDistance = (touch1: any, touch2: any) => {
    const dx = touch1.pageX - touch2.pageX;
    const dy = touch1.pageY - touch2.pageY;
    return Math.sqrt(dx * dx + dy * dy);
  };

  // ‚úÖ HELPER FUNCTION ƒê·ªÇ L·∫§Y BINARY DATA T·ª™ GLB PARSER
  const getGLBBinaryData = (gltf: any): ArrayBuffer | null => {
    let glbBinaryData = null;

    // Method 1: Try extensions.KHR_binary_glTF.body
    if (gltf.parser?.extensions?.KHR_binary_glTF?.body) {
      glbBinaryData = gltf.parser.extensions.KHR_binary_glTF.body;
      console.log('‚úÖ Found binary data via extensions.KHR_binary_glTF.body');
    }
    // Method 2: Try parser.buffers[0]
    else if (gltf.parser?.buffers?.[0]) {
      glbBinaryData = gltf.parser.buffers[0];
      console.log('‚úÖ Found binary data via parser.buffers[0]');
    }
    // Method 3: Try getDependency
    else if (gltf.parser?.getDependency) {
      try {
        glbBinaryData = gltf.parser.getDependency('buffer', 0);
        console.log('‚úÖ Found binary data via getDependency');
      } catch (error) {
        console.log('‚ö†Ô∏è getDependency failed:', error);
      }
    }
    // Method 4: Try direct access to parser
    else if (gltf.parser?.json?.buffers?.[0]) {
      const bufferInfo = gltf.parser.json.buffers[0];
      console.log('üîç Buffer info:', bufferInfo);
      // This might need different approach
    }

    console.log('üîç Binary data found:', !!glbBinaryData, glbBinaryData?.byteLength);
    return glbBinaryData;
  };

  // ‚úÖ ONCONTEXTCREATE FUNCTION FOR GLVIEW
  const onContextCreate = (gl: any) => {
    console.log('üé¨ Creating 3D context...');

    try {
      // Create scene
      const scene = new THREE.Scene();
      scene.background = new THREE.Color(0x000000);

      // Create camera
      const camera = new THREE.PerspectiveCamera(75, gl.drawingBufferWidth / gl.drawingBufferHeight, 0.1, 1000);
      camera.position.set(0, 0, 5);

      // Create renderer
      const renderer = new THREE.WebGLRenderer({ canvas: gl.canvas, context: gl });
      renderer.setSize(gl.drawingBufferWidth, gl.drawingBufferHeight);
      renderer.setPixelRatio(gl.drawingBufferWidth / gl.drawingBufferHeight);

      // Store refs
      sceneRef.current = scene;
      cameraRef.current = camera;
      rendererRef.current = renderer;

      // Animation loop
      const animate = () => {
        requestAnimationFrame(animate);

        if (modelRef.current) {
          // Auto rotate model
          if (!(modelRef.current as any).isUserRotating) {
            modelRef.current.rotation.y += 0.01;
          }
        }

        renderer.render(scene, camera);
        gl.endFrameEXP();
      };

      animate();
      console.log('üé¨ 3D Scene initialized successfully!');

    } catch (error) {
      console.error('Error creating 3D context:', error);
      setIsLoading(false);
    }
  };

  // ‚úÖ SIMPLE TEXTURE LOADING FUNCTION
  const loadFoxTexture = async (): Promise<THREE.Texture | null> => {
    try {
      console.log('üé® Loading Fox texture...');

      // Load texture from assets
      const textureLoader = new THREE.TextureLoader();
      const texture = await new Promise<THREE.Texture>((resolve, reject) => {
        textureLoader.load(
          require('../assets/models/Fox.png'),
          (texture) => {
            console.log('‚úÖ Fox texture loaded successfully!');
            resolve(texture);
          },
          undefined,
          (error) => {
            console.error('‚ùå Failed to load Fox texture:', error);
            reject(error);
          }
        );
      });

      // Configure texture
      texture.wrapS = THREE.RepeatWrapping;
      texture.wrapT = THREE.RepeatWrapping;
      texture.flipY = false;
      if ('colorSpace' in texture) {
        texture.colorSpace = THREE.SRGBColorSpace;
      }

      return texture;
    } catch (error) {
      console.error('‚ùå Texture loading failed:', error);
      return null;
    }
  };

  // ‚úÖ LOAD POKEMON MODEL FUNCTION
  const loadPokemonModel = async (qrData: string) => {
    try {
      console.log('üéØ Loading Pokemon model for QR data:', qrData);
      setIsLoading(true);
      setLoadingProgress(10);
      setModelInfo('üîç ƒêang x√°c ƒë·ªãnh model...');

      // Get model configuration
      const glbConfig = getGLBModelConfig(qrData);
      if (!glbConfig) {
        throw new Error(`Kh√¥ng t√¨m th·∫•y c·∫•u h√¨nh model cho QR data: ${qrData}`);
      }

      console.log('üì¶ Model config:', glbConfig);
      setModelInfo(`üì¶ ƒêang t·∫£i ${glbConfig.name}...`);
      setLoadingProgress(30);

      // Load Fox texture
      const foxTexture = await loadFoxTexture();
      if (foxTexture) {
        console.log('‚úÖ Fox texture loaded successfully!');
      } else {
        console.log('‚ö†Ô∏è Fox texture failed to load, using fallback colors');
      }

      // Load model using expo-three
      const asset = Asset.fromModule(require('../assets/models/Fox.glb'));
      await asset.downloadAsync();

      const gltf = await loadAsync(asset);
      const loadedModel = gltf.scene;

      // Apply texture to model
      if (foxTexture) {
        loadedModel.traverse((child: any) => {
          if (child.isMesh && child.material) {
            child.material.map = foxTexture;
            child.material.needsUpdate = true;
          }
        });
      }

      // Set up model
      loadedModel.position.set(0, -0.1, 0);
      loadedModel.scale.setScalar(0.1);

      // Store model reference
      modelRef.current = loadedModel;

      setLoadingProgress(100);
      setModelInfo(`‚úÖ ${glbConfig.name} ƒë√£ s·∫µn s√†ng!`);
      setIsLoading(false);

      console.log('‚úÖ Model loaded successfully!');

    } catch (error) {
      console.error('‚ùå Model loading failed:', error);
      const errorMessage = error instanceof Error ? error.message : String(error);
      setModelInfo(`‚ùå L·ªói t·∫£i model: ${errorMessage}`);
      setIsLoading(false);

      Alert.alert(
        '‚ùå L·ªói t·∫£i model',
        'Kh√¥ng th·ªÉ t·∫£i model 3D. Vui l√≤ng th·ª≠ l·∫°i.',
        [{ text: 'OK' }]
      );
    }
  };

  // ‚úÖ TC3.1: ENHANCED RAYCASTING FOR TOUCH ANIMATION TRIGGER
  const performRaycasting = (touchX: number, touchY: number, screenWidth: number, screenHeight: number) => {
    if (!modelRef.current || !cameraRef.current || !rendererRef.current) {
      console.log('‚ùå Raycasting failed - missing refs');
      return null;
    }

    // Convert screen coordinates to normalized device coordinates (-1 to +1)
    const mouse = new THREE.Vector2();
    mouse.x = (touchX / screenWidth) * 2 - 1;
    mouse.y = -(touchY / screenHeight) * 2 + 1;

    console.log('üéØ Raycasting at:', { touchX, touchY, mouseX: mouse.x, mouseY: mouse.y });

    // Create raycaster
    const raycaster = new THREE.Raycaster();
    raycaster.setFromCamera(mouse, cameraRef.current);

    // Check intersection with model
    const intersects = raycaster.intersectObject(modelRef.current, true);

    console.log('üîç Raycasting results:', {
      intersects: intersects.length,
      modelPosition: modelRef.current.position,
      modelScale: modelRef.current.scale,
      modelVisible: modelRef.current.visible
    });

    if (intersects.length > 0) {
      console.log('üéØ Model touched! Triggering animation...', intersects[0]);
      return intersects[0];
    }

    console.log('‚ùå No intersection with model');
    return null;
  };

  // ‚úÖ TC3.1: TRIGGER ANIMATION ON TOUCH
  const triggerTouchAnimation = (animationName: string = 'hit') => {
    if (!mixerRef.current || !modelRef.current) return;

    const anyModel = modelRef.current as any;
    const clips = anyModel.animations || [];

    if (clips.length > 0) {
      // Find animation clip
      const clip = clips.find((c: any) =>
        c.name?.toLowerCase().includes(animationName.toLowerCase())
      ) || clips[Math.floor(Math.random() * clips.length)]; // Random if not found

      // Stop current action and play new one
      mixerRef.current.stopAllAction();
      const action = mixerRef.current.clipAction(clip);
      action.reset();
      action.setLoop(THREE.LoopOnce, 1);
      action.clampWhenFinished = true;
      action.play();

      setCurrentAnimation(animationName);
      setAnimationFeedback(`üéØ ${animationName.toUpperCase()}!`);
      console.log(`üé¨ Playing touch animation: ${clip.name || animationName}`);

      // Clear feedback after short time
      setTimeout(() => setAnimationFeedback(''), 1000);

      // Return to idle after animation
      setTimeout(() => {
        if (mixerRef.current) {
          const idleClip = clips.find((c: any) => c.name?.toLowerCase().includes('idle')) || clips[0];
          const idleAction = mixerRef.current.clipAction(idleClip);
          idleAction.reset();
          idleAction.play();
          setCurrentAnimation('idle');
        }
      }, clip.duration * 1000 || 2000);
    }
  };

  // ‚úÖ TC3.2: SWIPE GESTURE DETECTION AND THROW ANIMATION
  const detectSwipeGesture = (startX: number, startY: number, endX: number, endY: number, duration: number) => {
    const deltaX = endX - startX;
    const deltaY = endY - startY;
    const distance = Math.sqrt(deltaX * deltaX + deltaY * deltaY);
    const velocity = distance / duration; // pixels per ms

    // Swipe thresholds
    const minDistance = 100; // minimum swipe distance
    const minVelocity = 0.5; // minimum swipe velocity

    if (distance > minDistance && velocity > minVelocity) {
      // Determine swipe direction
      const angle = Math.atan2(deltaY, deltaX);
      const direction = {
        horizontal: Math.abs(deltaX) > Math.abs(deltaY),
        vertical: Math.abs(deltaY) > Math.abs(deltaX),
        right: deltaX > 0,
        left: deltaX < 0,
        up: deltaY < 0,
        down: deltaY > 0
      };

      console.log(`üèê Swipe detected! Distance: ${distance.toFixed(2)}, Velocity: ${velocity.toFixed(2)}, Direction:`, direction);

      // Trigger throw animation based on direction
      if (direction.horizontal) {
        triggerThrowAnimation(direction.right ? 'throw_right' : 'throw_left', velocity);
      } else if (direction.vertical) {
        triggerThrowAnimation(direction.up ? 'throw_up' : 'throw_down', velocity);
      }

      return true;
    }
    return false;
  };

  // ‚úÖ TC3.2: TRIGGER THROW ANIMATION
  const triggerThrowAnimation = (throwType: string, velocity: number) => {
    if (!mixerRef.current || !modelRef.current) return;

    const anyModel = modelRef.current as any;
    const clips = anyModel.animations || [];

    if (clips.length > 0) {
      // Find throw animation or use attack/fly animation
      const throwClip = clips.find((c: any) =>
        c.name?.toLowerCase().includes('attack') ||
        c.name?.toLowerCase().includes('fly') ||
        c.name?.toLowerCase().includes('jump')
      ) || clips[Math.floor(Math.random() * clips.length)];

      // Stop current action and play throw animation
      mixerRef.current.stopAllAction();
      const action = mixerRef.current.clipAction(throwClip);
      action.reset();
      action.setLoop(THREE.LoopOnce, 1);
      action.clampWhenFinished = true;

      // Adjust playback speed based on swipe velocity
      const speedMultiplier = Math.min(Math.max(velocity / 2, 0.5), 3.0);
      action.setEffectiveTimeScale(speedMultiplier);
      action.play();

      setCurrentAnimation(throwType);
      setAnimationFeedback(`üèê ${throwType.replace('_', ' ').toUpperCase()}!`);
      console.log(`üé¨ Playing throw animation: ${throwClip.name || throwType} (speed: ${speedMultiplier.toFixed(2)}x)`);

      // Clear feedback after animation
      setTimeout(() => setAnimationFeedback(''), 1500);

      // Add visual feedback - temporary scale effect
      if (modelRef.current) {
        const originalScale = (modelRef.current as any).originalScale || 0.6;
        const scaleEffect = originalScale * (1 + velocity * 0.1);
        modelRef.current.scale.setScalar(scaleEffect);

        // Return to normal scale
        setTimeout(() => {
          if (modelRef.current) {
            modelRef.current.scale.setScalar(originalScale);
          }
        }, 200);
      }

      // Return to idle after animation
      setTimeout(() => {
        if (mixerRef.current) {
          const idleClip = clips.find((c: any) => c.name?.toLowerCase().includes('idle')) || clips[0];
          const idleAction = mixerRef.current.clipAction(idleClip);
          idleAction.reset();
          idleAction.play();
          setCurrentAnimation('idle');
        }
      }, (throwClip.duration * 1000 / speedMultiplier) || 1500);
    }
  };

  const handleTouchStart = (event: any) => {
    const touches = event.nativeEvent.touches;
    console.log(`üëÜ Touch start: ${touches.length} fingers`);

    if (touches.length === 1) {
      const touch = touches[0];

      // ‚úÖ TC3.1: RAYCASTING CHECK FOR MODEL TOUCH - TC6.2: USE ACTUAL SCREEN DIMENSIONS
      const intersection = performRaycasting(touch.pageX, touch.pageY, screenData.width, screenData.height);

      if (intersection) {
        // Model was touched - trigger animation
        triggerTouchAnimation('hit');
      } else {
        // Empty space touched - could be rotation or swipe
        setTouchStart({ x: touch.pageX, y: touch.pageY });
        setSwipeStart({ x: touch.pageX, y: touch.pageY, time: Date.now() });
        setIsSwipeGesture(false);
        console.log(`üîÑ Single touch - rotation/swipe mode`);
      }
    } else if (touches.length === 2) {
      // Multi touch - zoom
      const distance = getDistance(touches[0], touches[1]);
      setInitialDistance(distance);
      setCurrentScale(1); // Reset scale
      console.log(`üîç Multi touch - zoom mode, distance: ${distance.toFixed(2)}`);
      console.log(`üéØ Zoom gesture initialized with distance: ${distance.toFixed(2)}`);
      console.log(`üéØ Zoom gesture state:`, {
        initialDistance: distance,
        currentScale: 1,
        touches: touches.length
      });
      console.log(`üéØ Model scale before zoom:`, modelRef.current ? {
        x: modelRef.current.scale.x.toFixed(4),
        y: modelRef.current.scale.y.toFixed(4),
        z: modelRef.current.scale.z.toFixed(4)
      } : 'No model');
    }
  };

  const handleTouchMove = (event: any) => {
    if (!modelRef.current) return;

    const touches = event.nativeEvent.touches;
    console.log(`üëÜ Touch move: ${touches.length} fingers`);

    if (touches.length === 1 && touchStart) {
      // Single touch - rotation
      const touch = touches[0];
      const deltaX = touch.pageX - touchStart.x;
      const deltaY = touch.pageY - touchStart.y;
      const rotationSpeed = 0.008; // ‚úÖ TƒÇNG T·ªêC ƒê·ªò XOAY

      console.log('üîÑ Rotation gesture:', {
        deltaX,
        deltaY,
        rotationSpeed,
        currentRotation: {
          x: modelRef.current.rotation.x,
          y: modelRef.current.rotation.y,
          z: modelRef.current.rotation.z
        }
      });

      // ‚úÖ ƒê√ÅNH D·∫§U USER ƒêANG XOAY
      (modelRef.current as any).isUserRotating = true;

      // ‚úÖ XOAY 360 ƒê·ªò THEO C·∫¢ X V√Ä Y - FIX
      const newRotationY = modelRef.current.rotation.y + deltaX * rotationSpeed;
      const newRotationX = modelRef.current.rotation.x + deltaY * rotationSpeed * 0.3; // Gi·∫£m t·ªëc ƒë·ªô xoay d·ªçc

      console.log('üîÑ New rotation calculation:', {
        newRotationX,
        newRotationY,
        deltaX,
        deltaY,
        rotationSpeed
      });

      modelRef.current.rotation.y = newRotationY;
      modelRef.current.rotation.x = newRotationX;

      // ‚úÖ GI·ªöI H·∫†N ROTATION X ƒê·ªÇ KH√îNG B·ªä L·∫¨T NG∆Ø·ª¢C
      const clampedRotationX = Math.max(-Math.PI / 3, Math.min(Math.PI / 3, modelRef.current.rotation.x));
      modelRef.current.rotation.x = clampedRotationX;

      console.log('‚úÖ Rotation applied:', {
        finalRotation: {
          x: modelRef.current.rotation.x,
          y: modelRef.current.rotation.y,
          z: modelRef.current.rotation.z
        },
        clamped: clampedRotationX !== newRotationX
      });

      // ‚úÖ C·∫¨P NH·∫¨T TOUCH START ƒê·ªÇ XOAY M∆Ø·ª¢T
      setTouchStart({ x: touch.pageX, y: touch.pageY });

    } else if (touches.length === 2 && initialDistance) {
      // Multi touch - zoom
      const currentDistance = getDistance(touches[0], touches[1]);
      const scale = currentDistance / initialDistance;

      console.log(`üîç Zoom gesture active:`, {
        currentDistance: currentDistance.toFixed(2),
        initialDistance: initialDistance.toFixed(2),
        scale: scale.toFixed(3)
      });

      // ‚úÖ DYNAMIC ZOOM LIMITS BASED ON MODEL SIZE
      const originalScale = (modelRef.current as any).originalScale || 0.1;
      const minScale = (modelRef.current as any).minScale || originalScale * 0.5;
      const maxScale = (modelRef.current as any).maxScale || originalScale * 3.0;

      // ‚úÖ FIXED ZOOM LOGIC - USE CUMULATIVE SCALE
      const currentModelScale = modelRef.current.scale.x;
      const newScale = currentModelScale * scale;
      const clampedScale = Math.max(minScale, Math.min(maxScale, newScale));

      // ‚úÖ APPLY SCALE TO MODEL
      modelRef.current.scale.setScalar(clampedScale);

      console.log(`üîç Zoom applied:`, {
        currentModelScale: currentModelScale.toFixed(4),
        newScale: newScale.toFixed(4),
        clampedScale: clampedScale.toFixed(4),
        originalScale: originalScale.toFixed(4),
        minScale: minScale.toFixed(4),
        maxScale: maxScale.toFixed(4),
        currentDistance: currentDistance.toFixed(2)
      });

      // ‚úÖ VERIFY SCALE APPLICATION
      console.log(`üîç Scale verification:`, {
        beforeScale: currentModelScale.toFixed(4),
        afterScale: modelRef.current.scale.x.toFixed(4),
        scaleChanged: Math.abs(modelRef.current.scale.x - currentModelScale) > 0.0001
      });

      // ‚úÖ C·∫¨P NH·∫¨T DISTANCE LI√äN T·ª§C
      setInitialDistance(currentDistance);
    } else if (touches.length === 2 && !initialDistance) {
      console.log(`‚ö†Ô∏è Zoom gesture detected but no initialDistance set`);
    }
  };

  const handleTouchEnd = (event: any) => {
    const touches = event.nativeEvent.touches;
    console.log(`üëÜ Touch end: ${touches.length} fingers remaining`);

    // ‚úÖ RESET ZOOM GESTURE STATE
    if (touches.length < 2) {
      if (initialDistance) {
        console.log(`üîç Zoom gesture ended, resetting initialDistance`);
        setInitialDistance(null);
      }
    }

    // ‚úÖ TC3.2: CHECK FOR SWIPE GESTURE ON TOUCH END
    if (swipeStart && !isSwipeGesture) {
      const touch = event.nativeEvent.changedTouches[0];
      const endTime = Date.now();
      const duration = endTime - swipeStart.time;

      const wasSwipe = detectSwipeGesture(
        swipeStart.x,
        swipeStart.y,
        touch.pageX,
        touch.pageY,
        duration
      );

      if (wasSwipe) {
        setIsSwipeGesture(true);
      }
    }

    setTouchStart(null);
    setSwipeStart(null);
    setInitialDistance(null);
    setIsSwipeGesture(false);

    // ‚úÖ RESET USER ROTATING FLAG SAU 1 GI√ÇY
    setTimeout(() => {
      if (modelRef.current) {
        (modelRef.current as any).isUserRotating = false;
      }
    }, 1000);
  };

  const onHandlerStateChange = (event: any) => {
    if (event.nativeEvent.state === State.END) {
      if (modelRef.current) {
        const { velocityX } = event.nativeEvent;
        const momentum = velocityX * 0.002; // TƒÉng momentum

        // ‚úÖ TH√äM MOMENTUM SAU KHI TH·∫¢ TAY
        modelRef.current.rotation.y += momentum;

        // ‚úÖ RESET FLAG SAU 2 GI√ÇY
        setTimeout(() => {
          if (modelRef.current) {
            (modelRef.current as any).isUserRotating = false;
            // console.log(`üîÑ Auto rotation resumed`); // ‚ùå B·ªöT LOG
          }
        }, 2000);

        // console.log(`üöÄ Momentum applied: ${momentum}, Final rotation: ${modelRef.current.rotation.y}`); // ‚ùå B·ªöT LOG
      }
    }
  };

  useEffect(() => {
    requestCameraPermission();

    // ‚úÖ PRELOAD MODELS NGAY KHI KH·ªûI ƒê·ªòNG APP
    preloadModels();

    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  // ‚úÖ PRELOAD MODELS FOR INSTANT LOADING
  const preloadModels = async () => {
    try {
      console.log('‚ö° Preloading models for instant access...');

      // ‚úÖ PRELOAD SCIZOR MODEL - DIRECT LOADING
      try {
        const scizorModuleId = require('../assets/models/pokemon_scizor.glb');
        console.log('‚úÖ Scizor model preloaded! ModuleId:', scizorModuleId);
      } catch (error) {
        console.log('‚ö†Ô∏è Scizor preload failed:', error);
      }

      // ‚úÖ PRELOAD FOX MODEL - DIRECT LOADING
      try {
        const foxModuleId = require('../assets/models/Fox.glb');
        console.log('‚úÖ Fox model preloaded! ModuleId:', foxModuleId);
      } catch (error) {
        console.log('‚ö†Ô∏è Fox preload failed:', error);
      }

    } catch (error) {
      console.log('‚ö†Ô∏è Preload failed, will load on demand:', error);
    }
  };

  const requestCameraPermission = async () => {
    try {
      console.log('üîç Requesting camera permission...');
      
      // ‚úÖ CHECK CURRENT PERMISSION STATUS FIRST
      const currentStatus = await Camera.getCameraPermissionsAsync();
      console.log('üì∑ Current permission status:', currentStatus.status);
      
      if (currentStatus.status === 'granted') {
        console.log('‚úÖ Camera permission already granted');
        setHasPermission(true);
        return;
      }
      
      // ‚úÖ REQUEST PERMISSION IF NOT GRANTED
      const { status } = await Camera.requestCameraPermissionsAsync();
      console.log('üì∑ Permission request result:', status);
      
      setHasPermission(status === 'granted');
      console.log('üì∑ Camera permission:', status === 'granted' ? 'GRANTED' : 'DENIED');
      
      if (status !== 'granted') {
        console.log('‚ùå Camera permission denied, showing error...');
      }
      
    } catch (error) {
      console.error('‚ùå Camera permission error:', error);
      setHasPermission(false);
    }
  };

  // ‚úÖ NO FALLBACK MODELS - ONLY REAL GLB LOADING

  // Handle QR Code scan
  const handleBarCodeScanned = ({ type, data }: { type: string; data: string }) => {
    console.log('üéØ QR Code scanned successfully:', data);
    setScannedData(data);
    loadPokemonModel(data);
  };


  // ‚úÖ MAIN RETURN - COMPONENT JSX
  console.log('üì∑ Rendering camera view with permission:', hasPermission);
  return (
    <GestureHandlerRootView style={styles.container}>
      {/* Camera l√†m background */}
      <CameraView
        style={styles.camera}
        facing="back"
        onBarcodeScanned={scannedData ? undefined : handleBarCodeScanned}
        barcodeScannerSettings={{
          barcodeTypes: ['qr', 'pdf417'],
        }}
      />

        {/* ‚úÖ FIX: TOUCH HANDLER TR·ª∞C TI·∫æP V·ªöI GLVIEW */ }
        <View
          style={styles.glContainer}
          onTouchStart={(event) => {
            console.log('üî• onTouchStart triggered');
            handleTouchStart(event);
          }}
          onTouchMove={(event) => {
            console.log('üî• onTouchMove triggered');
            handleTouchMove(event);
          }}
          onTouchEnd={(event) => {
            console.log('üî• onTouchEnd triggered');
            handleTouchEnd(event);
          }}
        >
          <GLView
            style={styles.glView}
            onContextCreate={onContextCreate}
          />
        </View>

        {/* Loading Overlay */ }
        {
          isLoading && (
            <View style={styles.loadingContainer}>
              <View style={styles.loadingCard}>
                <ActivityIndicator size="large" color="#FFD700" />
                <Text style={styles.loadingText}>{modelInfo}</Text>

                <View style={styles.progressBarContainer}>
                  <View style={[styles.progressBar, { width: `${loadingProgress}%` }]} />
                </View>
                <Text style={styles.progressText}>{loadingProgress}%</Text>

                <Text style={styles.systemInfo}>üéÆ Pokemon AR System</Text>
              </View>
            </View>
          )
        }

        {/* UI Controls */ }
        <View style={styles.overlay}>
          {/* ‚úÖ FIX: UI NH·∫§T QU√ÅN - THAY ƒê·ªîI THEO TR·∫†NG TH√ÅI */}
          {!scannedData ? (
            <Text style={styles.instruction}>
              üì± Qu√©t QR code ƒë·ªÉ hi·ªÉn th·ªã Pokemon 3D
            </Text>
          ) : (
            <View>
              {/* ‚úÖ REMOVE ALL NOTIFICATIONS */}
              {/* ‚úÖ TC6.1: ANIMATION FEEDBACK UI */}
              {animationFeedback && (
                <Text style={styles.animationFeedback}>
                  {animationFeedback}
                </Text>
              )}
            </View>
          )}

          {/* ‚úÖ REMOVED INSTRUCTION TEXT AS REQUESTED */}

          {/* ‚úÖ CH·ªà HI·ªÜN KHI ƒêANG LOADING ƒê·ªÇ TR√ÅNH R·ªêI UI */}
          {scannedData && isLoading && (
            <Text style={styles.scannedData}>
              üîç ƒê√£ qu√©t: {scannedData}
            </Text>
          )}

          <TouchableOpacity
            style={styles.closeButton}
            onPress={onClose}
          >
            <Text style={styles.closeText}>‚ùå ƒê√≥ng</Text>
          </TouchableOpacity>
        </View>
    </GestureHandlerRootView >
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#000',
  },
  camera: {
    flex: 1,
  },
  glContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    width: '100%',
    height: '100%',
    justifyContent: 'center',
    alignItems: 'center',
    pointerEvents: 'box-none',
  },
  glView: {
    width: '100%',
    height: '100%',
  },
  overlay: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    justifyContent: 'space-between',
    zIndex: 1000, // ‚úÖ UI ELEMENTS LU√îN ·ªû TR√äN 3D MODEL
    alignItems: 'center',
    // ‚úÖ TC6.2: ADAPTIVE PADDING FOR DIFFERENT DEVICES
    paddingTop: Platform.OS === 'ios' ? (Dimensions.get('window').height > 800 ? 60 : 40) : 30,
    paddingBottom: Platform.OS === 'ios' ? 40 : 30,
    paddingHorizontal: 20,
  },
  instruction: {
    color: '#fff',
    // ‚úÖ TC6.2: RESPONSIVE FONT SIZE
    fontSize: Dimensions.get('window').width < 375 ? 16 : 18,
    fontWeight: 'bold',
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.8)', // ‚úÖ TƒÇNG OPACITY CHO R√ï R√ÄNG
    paddingHorizontal: 20,
    paddingVertical: 10,
    borderRadius: 10,
    marginTop: 20,
    borderWidth: 1,
    borderColor: 'rgba(255, 255, 255, 0.2)', // ‚úÖ VI·ªÄN TR·∫ÆNG NH·∫∏
    // ‚úÖ TC6.2: ENSURE VISIBILITY ON ALL DEVICES
    maxWidth: Dimensions.get('window').width - 40,
  },
  subInstruction: {
    color: '#fff',
    fontSize: 14,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.6)',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 10,
    marginTop: 10,
  },
  scannedData: {
    color: '#FFD700',
    fontSize: 12,
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.8)',
    paddingHorizontal: 15,
    paddingVertical: 5,
    borderRadius: 15,
    marginTop: 5,
  },
  closeButton: {
    backgroundColor: 'rgba(255,0,0,0.7)',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    marginBottom: 20,
  },
  closeText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  // ‚úÖ TC6.1: ANIMATION FEEDBACK STYLES
  animationFeedback: {
    color: '#FFD700',
    fontSize: 24,
    fontWeight: 'bold',
    textAlign: 'center',
    backgroundColor: 'rgba(0,0,0,0.8)',
    paddingHorizontal: 20,
    paddingVertical: 8,
    borderRadius: 20,
    marginTop: 10,
    borderWidth: 2,
    borderColor: '#FFD700',
    shadowColor: '#FFD700',
    shadowOffset: { width: 0, height: 0 },
    shadowOpacity: 0.8,
    shadowRadius: 10,
  },
  loadingContainer: {
    position: 'absolute',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.8)',
    justifyContent: 'center',
    alignItems: 'center',
    zIndex: 1000,
  },
  loadingCard: {
    backgroundColor: 'rgba(255, 255, 255, 0.95)',
    padding: 30,
    borderRadius: 20,
    alignItems: 'center',
    minWidth: 280,
    shadowColor: '#000',
    shadowOffset: { width: 0, height: 4 },
    shadowOpacity: 0.3,
    shadowRadius: 8,
    elevation: 10,
  },
  loadingText: {
    color: '#333',
    fontSize: 16,
    fontWeight: '600',
    marginTop: 15,
    marginBottom: 20,
    textAlign: 'center',
  },
  progressBarContainer: {
    width: 200,
    height: 6,
    backgroundColor: '#E0E0E0',
    borderRadius: 3,
    overflow: 'hidden',
    marginBottom: 10,
  },
  progressBar: {
    height: '100%',
    backgroundColor: '#FFD700',
    borderRadius: 3,
  },
  progressText: {
    color: '#666',
    fontSize: 14,
    fontWeight: '500',
    marginBottom: 10,
  },
  systemInfo: {
    color: '#4CAF50',
    fontSize: 12,
    fontWeight: '500',
    textAlign: 'center',
  },
  button: {
    backgroundColor: '#007AFF',
    paddingHorizontal: 30,
    paddingVertical: 15,
    borderRadius: 25,
    marginTop: 20,
  },
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  text: {
    color: '#fff',
    fontSize: 16,
    textAlign: 'center',
  },
});

export default PokemonARViewer;
